# -*- coding: utf-8 -*-
"""BigData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Joy1A6C_w9yCgsuKd8Yxg3-kZJKqKuxo

# **BRONZE LAYER**
"""

# Install the Cassandra python driver
!pip install cassandra-driver

# Import the necessary libraries
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json

# The secure connect bundle
cloud_config= {
  'secure_connect_bundle': 'secure-connect-architecture.zip'
}

with open("architecture-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

if session:
  print('Connected!')
else:
  print("An error occurred.")

# Create a table in the 'architecture' keyspace
session.execute("""CREATE TABLE IF NOT EXISTS architecture.bronze (
        Region TEXT,
        Country TEXT,
        Item_Type TEXT,
        Sales_Channel TEXT,
        Order_Priority TEXT,
        Order_Date DATE,
        Order_ID int PRIMARY KEY,
        Ship_Date DATE,
        Units_Sold INT,
        Unit_Price DECIMAL,
        Unit_Cost DECIMAL,
        Total_Revenue DECIMAL,
        Total_Cost DECIMAL,
        Total_Profit DECIMAL
        )
""")

import requests
import pandas as pd

# URL of the CSV file
url = "https://raw.githubusercontent.com/gchandra10/filestorage/main/sales_100.csv"

# Download and read the CSV
response = requests.get(url)
with open("/content/sales_100.csv", "wb") as file:
    file.write(response.content)

# Inspect the data
rows = session.execute("SELECT * FROM architecture.bronze")
data = [row._asdict() for row in rows]
df = pd.DataFrame(data)

# Print the DataFrame
print(df.to_string(index=True))

"""# **SILVER LAYER**"""

session = cluster.connect()

import requests
import pandas as pd


## Find duplicates in order id as it is primary key
query = "SELECT Order_ID FROM architecture.bronze"
rows = session.execute(query)
# Convert rows to a list of Order_IDs
order_ids = list(rows)
# Check for duplicates
from collections import Counter
duplicates = [item for item, count in Counter(order_ids).items() if count > 1]
# Print results
if duplicates:
    print("Duplicate Order_IDs found:", duplicates)
else:
    print("No duplicates found.")



## Find missing values
query = "SELECT * FROM architecture.bronze"
rows = session.execute(query)
# Convert rows to Pandas DataFrame
df = pd.DataFrame(rows)
# Check for null values
missing_values = df.isnull().sum()
print("Missing values per column:")
print(missing_values)
# Filter rows with any missing values
rows_with_nulls = df[df.isnull().any(axis=1)]
print("Rows with missing values:")
print(rows_with_nulls)



##Country Name Normalization
query = "SELECT * FROM architecture.bronze"
rows = session.execute(query)
# Convert rows to Pandas DataFrame
df = pd.DataFrame(rows)
# Find unique countries
unique_countries = df['country'].unique()
# Print unique countries
print("Unique Country Names:")
print(unique_countries)

session.execute("""
    CREATE TABLE IF NOT EXISTS architecture.silver (
        Region TEXT,
        Country TEXT,
        Item_Type TEXT,
        Sales_Channel TEXT,
        Order_Priority TEXT,
        Order_Date DATE,
        Order_ID int PRIMARY KEY,
        Ship_Date DATE,
        Units_Sold INT,
        Unit_Price DECIMAL,
        Unit_Cost DECIMAL,
        Total_Revenue DECIMAL,
        Total_Cost DECIMAL,
        Total_Profit DECIMAL
    )
""")

cloud_config= {
  'secure_connect_bundle': 'secure-connect-architecture.zip'
}

# This token JSON file is autogenerated when you download your token
with open("architecture-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

import requests
import pandas as pd

session.execute("""
    CREATE TABLE IF NOT EXISTS architecture.silver (
        Region TEXT,
        Country TEXT,
        Item_Type TEXT,
        Sales_Channel TEXT,
        Order_Priority TEXT,
        Order_Date DATE,
        Order_ID int PRIMARY KEY,
        Ship_Date DATE,
        Units_Sold INT,
        Unit_Price DECIMAL,
        Unit_Cost DECIMAL,
        Total_Revenue DECIMAL,
        Total_Cost DECIMAL,
        Total_Profit DECIMAL
    )
""")

# Query to fetch all data from the original table
query = session.prepare("SELECT * FROM architecture.bronze")
rows = session.execute(query)
# Fetch data into a Pandas DataFrame
df = pd.DataFrame(rows)

# Insert data into the 'silver' table
for index, row in df.iterrows():
    session.execute("""
        INSERT INTO architecture.silver (Region, Country, Item_Type, Sales_Channel, Order_Priority,
        Order_Date, Order_ID, Ship_Date, Units_Sold, Unit_Price, Unit_Cost, Total_Revenue,
        Total_Cost, Total_Profit)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """, (row['region'], row['country'], row['item_type'], row['sales_channel'], row['order_priority'],
          row['order_date'], row['order_id'], row['ship_date'], row['units_sold'], row['unit_price'],
          row['unit_cost'], row['total_revenue'], row['total_cost'], row['total_profit']))

rows = session.execute("SELECT * FROM architecture.silver")
data = [row._asdict() for row in rows]
df = pd.DataFrame(data)

# Print the DataFrame
print(df.to_string(index=True))

"""# GOLD **LAYER**

## Gold Table 1
"""

#Table to show sales by region
cloud_config= {
  'secure_connect_bundle': 'secure-connect-architecture.zip'
}

# This token JSON file is autogenerated when you download your token
with open("architecture-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

session.execute("""CREATE TABLE IF NOT EXISTS architecture.sales_by_region (
        Region TEXT PRIMARY KEY,
        Total_Revenue DECIMAL,
        Total_Cost DECIMAL,
        Total_Profit DECIMAL
    )
    """)

import pandas as pd
from cassandra.cluster import Cluster


# Step 1: Query data from the 'silver' table
query = """
    SELECT Region, Total_Revenue, Total_Cost, Total_Profit
    FROM architecture.silver
"""
rows = session.execute(query)

# Step 2: Load the data into a Pandas DataFrame
df = pd.DataFrame(rows)

# Step 3: Aggregate data by Region
aggregated_df = df.groupby('region').agg(
    Total_Revenue=('total_revenue', 'sum'),
    Total_Cost=('total_cost', 'sum'),
    Total_Profit=('total_profit', 'sum')
).reset_index()

# Step 4: Insert aggregated data into 'sales_by_product_type' table
for _, row in aggregated_df.iterrows():
    insert_query = """
        INSERT INTO architecture.sales_by_region (Region, Total_Revenue, Total_Cost, Total_Profit)
        VALUES (%s, %s, %s, %s)
    """
    session.execute(insert_query, (row['region'], row['Total_Revenue'], row['Total_Cost'], row['Total_Profit']))

#Print Data
rows = session.execute("SELECT * FROM architecture.sales_by_region")
data = [row._asdict() for row in rows]
df = pd.DataFrame(data)

# Print the DataFrame
print(df.to_string(index=True))

"""## Gold Table 2"""

#Table to show sales by item type
cloud_config= {
  'secure_connect_bundle': 'secure-connect-architecture.zip'
}

# This token JSON file is autogenerated when you download your token
with open("architecture-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

session.execute("""CREATE TABLE IF NOT EXISTS architecture.sales_by_product (
        Item_Type TEXT PRIMARY KEY,
        Total_Units_Sold INT,
        Total_Revenue DECIMAL,
        Total_Cost DECIMAL,
        Total_Profit DECIMAL
    )
    """)

import pandas as pd
from cassandra.cluster import Cluster


# Step 1: Query data from the 'silver' table
query = """
    SELECT Item_Type, Units_Sold, Total_Revenue, Total_Cost, Total_Profit
    FROM architecture.silver
"""
rows = session.execute(query)

# Step 2: Load the data into a Pandas DataFrame
df = pd.DataFrame(rows)

# Step 3: Aggregate data by Item_Type
aggregated_df = df.groupby('item_type').agg(
    Total_Units_Sold=('units_sold', 'sum'),
    Total_Revenue=('total_revenue', 'sum'),
    Total_Cost=('total_cost', 'sum'),
    Total_Profit=('total_profit', 'sum')
).reset_index()

# Step 4: Insert aggregated data into 'sales_by_product_type' table
for _, row in aggregated_df.iterrows():
    insert_query = """
        INSERT INTO architecture.sales_by_product (Item_Type, Total_Units_Sold, Total_Revenue, Total_Cost, Total_Profit)
        VALUES (%s, %s, %s, %s, %s)
    """
    session.execute(insert_query, (row['item_type'], row['Total_Units_Sold'], row['Total_Revenue'], row['Total_Cost'], row['Total_Profit']))

#Print Data
rows = session.execute("SELECT * FROM architecture.sales_by_product")
data = [row._asdict() for row in rows]
df = pd.DataFrame(data)

# Print the DataFrame
print(df.to_string(index=True))

"""## Gold Table 3"""

#Table to show sales by country
cloud_config= {
  'secure_connect_bundle': 'secure-connect-architecture.zip'
}

# This token JSON file is autogenerated when you download your token
with open("architecture-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

session.execute("""CREATE TABLE IF NOT EXISTS architecture.sales_by_priority (
        Order_Priority TEXT PRIMARY KEY,
        Total_Revenue DECIMAL,
        Total_Cost DECIMAL,
        Total_Profit DECIMAL
    )
    """)

import pandas as pd
from cassandra.cluster import Cluster

query = """
    SELECT Order_Priority, Units_Sold, Total_Revenue, Total_Cost, Total_Profit
    FROM architecture.silver
"""
rows = session.execute(query)

# Step 3: Load the data into a Pandas DataFrame
df = pd.DataFrame(rows)

# Step 4: Aggregate data by Order_Priority using Pandas
aggregated_df = df.groupby('order_priority').agg(
    Total_Revenue=('total_revenue', 'sum'),
    Total_Cost=('total_cost', 'sum'),
    Total_Profit=('total_profit', 'sum')
).reset_index()

# Step 5: Insert the aggregated data into the 'sales_by_priority' table
for _, row in aggregated_df.iterrows():
    insert_query = """
        INSERT INTO architecture.sales_by_priority (Order_Priority, Total_Revenue, Total_Cost, Total_Profit)
        VALUES (%s, %s, %s, %s)
    """
    session.execute(insert_query, (row['order_priority'], row['Total_Revenue'], row['Total_Cost'], row['Total_Profit']))

#Print Data
rows = session.execute("SELECT * FROM architecture.sales_by_priority")
data = [row._asdict() for row in rows]
df = pd.DataFrame(data)

# Print the DataFrame
print(df.to_string(index=True))